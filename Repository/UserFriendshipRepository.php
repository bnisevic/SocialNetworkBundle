<?php
/*
 * This file is part of the SocialNetworkBundle package.
 *
 * (c) Fulgurio <http://fulgurio.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fulgurio\SocialNetworkBundle\Repository;

use Fulgurio\SocialNetworkBundle\Entity\UserFriendship;
use Doctrine\ORM\EntityRepository;
use Fulgurio\SocialNetworkBundle\Entity\User;

/**
 * UserFriendshipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class UserFriendshipRepository extends EntityRepository
{
    const NB_PER_PAGE = 10;

    /**
     * Return invitation asking friends for a given user
     *
     * @param User $user
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    public function findAskingFriends($user, $page = 1, $paginator = NULL)
    {
        return $this->filterFriendsByStatus($user, UserFriendship::ASKING_STATUS, $page, $paginator);
    }

    /**
     * Return invitation pending friends for a given user
     *
     * @param User $user
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    public function findPendingFriends($user, $page = 1, $paginator = NULL)
    {
        return $this->filterFriendsByStatus($user, UserFriendship::PENDING_STATUS, $page, $paginator);
    }

    /**
     * Return all accepted friends for a given user
     *
     * @param User $user
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    public function findAcceptedFriends($user, $page = 1, $paginator = NULL)
    {
        return $this->filterFriendsByStatus($user, UserFriendship::ACCEPTED_STATUS, $page, $paginator);
    }

    /**
     * Return all accepted and pendingfriends for a given user
     *
     * @param User $user
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    public function findAcceptedAndPendingFriends($user, $page = 1, $paginator = NULL)
    {
        return $this->filterFriendsByStatus($user, array(UserFriendship::ACCEPTED_STATUS, UserFriendship::PENDING_STATUS), $page, $paginator);
    }


    /**
     * Return all accepted and refused friends for a given user
     *
     * @param User $user
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    public function findAcceptedAndRefusedFriends($user, $page = 1, $paginator = NULL)
    {
        return $this->filterFriendsByStatus($user, array(UserFriendship::ACCEPTED_STATUS, UserFriendship::REFUSED_STATUS), $page, $paginator);
    }

    /**
     * Return friends with status filter for a given user
     *
     * @param User $user
     * @param string|array $status
     * @param integer $page
     * @param Paginator $paginator
     * @return ArrayCollection
     */
    protected function filterFriendsByStatus($user, $status, $page = 1, $paginator = NULL)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        //$query->select('u.id, u.avatar, u.username, u.lastname, u.firstname, u.email, f.status')
        $query->select('u.id, u.avatar, u.username, u.email, f.status')
            ->from($this->getEntityName(), 'f')
            ->join('f.user_tgt', 'u')
            ->where('f.user_src = :user AND u.enabled = 1')
//            ->orderBy('u.fullname');
        ;
        if (is_array($status))
        {
            $query->andWhere('f.status IN (:status)');
        }
        else
        {
            $query->andWhere('f.status=:status');
        }
        $query->setParameter('status', $status);
        $query->setParameter('user', $user);
        if (is_null($paginator))
        {
            return $query->getQuery()->getResult();
        }
        return $paginator->paginate($query->getQuery(), $page, self::NB_PER_PAGE);
    }

    /**
     * Check if 2 users have relationship
     *
     * @param integer | User $user
     * @param integer | User $friendUser
     */
    public function findByUserAndFriendUser($user, $friendUser)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT f
                FROM ' . $this->getEntityName() . ' f
                WHERE
                    (f.user_src=:user AND f.user_tgt=:friendUser)
                    OR (f.user_src=:friendUser AND f.user_tgt=:user)'
        )->setMaxResults(2);
        $query->setParameter('user', $user);
        $query->setParameter('friendUser', $friendUser);
        return $query->getResult();
    }

    /**
     * Check if 2 users are friends
     *
     * @param integer | User $user
     * @param integer | User $friendUser
     */
    public function areFriends($user, $friendUser)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT f
                FROM ' . $this->getEntityName() . ' f
                WHERE
                    ((f.user_src=:user AND f.user_tgt=:friendUser)
                    OR (f.user_src=:friendUser AND f.user_tgt=:user))
                    AND f.status=:status'
        )->setMaxResults(1);
        $query->setParameter('user', $user);
        $query->setParameter('friendUser', $friendUser);
        $query->setParameter('status', UserFriendship::ACCEPTED_STATUS);
        return $query->getResult();
    }

    /**
     * Check if 2 users have pending invitation
     *
     * @param integer | User $user
     * @param integer | User $friendUser
     */
    public function havePendingInvitation($user, $friendUser)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT f
                FROM ' . $this->getEntityName() . ' f
                WHERE
                    ((f.user_src=:user AND f.user_tgt=:friendUser)
                    OR (f.user_src=:friendUser AND f.user_tgt=:user))
                    AND f.status=:status'
        )->setMaxResults(1);
        $query->setParameter('user', $user);
        $query->setParameter('friendUser', $friendUser);
        $query->setParameter('status', UserFriendship::PENDING_STATUS);
        return $query->getResult();
    }

    /**
     * Search friend from a part of string
     *
     * @param User $user
     * @param string $username
     */
    public function searchFriend(User $user, $username)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT u.id, u.avatar, u.username
                FROM ' . $this->getEntityName() . ' f
                JOIN f.user_tgt u
                WHERE f.user_src=:user
                    AND f.status=:status
                    AND u.username LIKE :username
                    AND u.enabled=1
                ORDER BY u.username');
        $query->setParameter('user', $user);
        $query->setParameter('username', $username . '%');
        $query->setParameter('status', UserFriendship::ACCEPTED_STATUS);
        return $query->getResult();
    }
}