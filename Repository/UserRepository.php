<?php
/*
 * This file is part of the SocialNetworkBundle package.
 *
 * (c) Fulgurio <http://fulgurio.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fulgurio\SocialNetworkBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fulgurio\SocialNetworkBundle\Entity\User;
use Fulgurio\SocialNetworkBundle\Entity\Message;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class UserRepository extends EntityRepository
{
    const NB_PER_PAGE = 10;

    /**
     * Find all users (without admin) with sortable option, and default order by
     * name
     *
     * @param object $paginator
     * @param number $page
     * @param string $searchQuery
     */
    public function findOnlySubscribers($paginator, $page = 1, $searchQuery = NULL)
    {
        if ($searchQuery === NULL || $searchQuery ==='')
        {
            $search = '';
        }
        else
        {
            $search = ' AND (a.email LIKE :searchQuery)';
        }
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM ' . $this->getEntityName() . ' a
                WHERE a.roles NOT LIKE :role1
                  AND a.roles NOT LIKE :role2
                  AND a.roles NOT LIKE :role3
                ' . $search . '
                ORDER BY a.username'
        );
        $query->setParameter('role1', '%"ROLE_SUPER_ADMIN"%');
        $query->setParameter('role2', '%"ROLE_ADMIN"%');
        $query->setParameter('role3', '%"ROLE_GHOST"%');
        if ($search !== '')
        {
            $query->setParameter('searchQuery', '%' . $searchQuery . '%');
        }
        return $paginator->paginate($query, $page, self::NB_PER_PAGE);
    }

    /**
     * Find all users (without Ghost) with sortable option, and default order by name
     *
     * @param object $paginator
     * @param number $page
     * @param string $searchQuery
     */
    public function findWithPagination($paginator, $page = 1, $searchQuery = NULL)
    {
        if ($searchQuery === NULL || $searchQuery ==='')
        {
            $search = '';
        }
        else
        {
            $search = ' AND (a.email LIKE :searchQuery)';
        }
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM ' . $this->getEntityName() . ' a
                WHERE a.roles NOT LIKE :role
                ' . $search . '
                ORDER BY a.username
        ');
        $query->setParameter('role', '%"ROLE_GHOST"%');
        if ($search !== '')
        {
            $query->setParameter('searchQuery', '%' . $searchQuery . '%');
        }
        return $paginator->paginate($query, $page, self::NB_PER_PAGE);
    }

    /**
     * Find enabled user from a part of their username
     *
     * @param string $username
     * @param array $excludeIDs
     */
    public function findOnlyInEnabledSubscribers($username, $excludeIDs)
    {
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM ' . $this->getEntityName() . ' a
                WHERE a.roles NOT LIKE :role1
                    AND a.roles NOT LIKE :role2
                    AND a.roles NOT LIKE :role3
                    AND a.username LIKE :username
                    AND a.id NOT IN (:ids)
                    AND a.enabled=1
                ORDER BY a.username
        ');
        $query->setParameter('role1', '%"ROLE_SUPER_ADMIN"%');
        $query->setParameter('role2', '%"ROLE_ADMIN"%');
        $query->setParameter('role3', '%"ROLE_GHOST"%');
        $query->setParameter('username', $username . '%');
        $query->setParameter('ids', $excludeIDs);
        return $query->getResult();
    }

    public function getAcceptedFriendsQuery(User $user)
    {
        return $this->createQueryBuilder('u')
                ->join('u.friends', 'uf')
                ->where('uf.user_src=:user')
                ->andWhere('uf.status=:status')
                ->orderBy('u.username')
                ->setParameter('user', $user)
                ->setParameter('status', 'accepted')
                ;
    }

    /**
     * Find message participants
     *
     * @param Message $message
     */
    public function findChatParticipants(Message $message)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT u
                FROM ' . $this->getEntityName() . ' u
                JOIN u.msgTarget m
                WHERE m.message = :message
                    AND u.enabled = 1
                ORDER BY u.username');
        $query->setParameter('message', $message);
        return $query->getResult();
    }
}