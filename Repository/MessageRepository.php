<?php
/*
 * This file is part of the SocialNetworkBundle package.
 *
 * (c) Fulgurio <http://fulgurio.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fulgurio\SocialNetworkBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fulgurio\SocialNetworkBundle\Entity\Message;
use Fulgurio\SocialNetworkBundle\Entity\User;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class MessageRepository extends EntityRepository
{
    /**
     * Find user root messages
     *
     * @param User $user
     * @return Query
     */
    public function getRootMessagesQuery($user)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT m, mt.has_read
                FROM ' . $this->getEntityName() . ' m
                JOIN m.target mt
                WHERE mt.target=:user
                    AND m.parent IS NULL
                    AND mt.is_deleted = 0
                ORDER BY m.updated_at DESC');
        $query->setParameter('user', $user);
        return $query;
    }

    /**
     * Update root message to set off read flag and deleted flag too,
     * for specified users
     *
     * @param Message $message
     * @param Collection $users
     */
    public function markRootAsUnreadAndUndeleted(Message $message, $users)
    {
        $query = $this->getEntityManager()->createQuery(
                'UPDATE ' . $this->getEntityName() . 'Target mt
                SET mt.has_read = 0, mt.is_deleted = 0
                WHERE mt.target IN (:users)
                    AND mt.message = :message');
        $query->setParameter('message', $message);
        $query->setParameter('users', $users);
        $query->getSingleScalarResult();
    }

    /**
     * Get number of unread message
     *
     * @param Message $message
     * @param Collection $users
     */
    public function countUnreadMessage($user)
    {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT COUNT (mt)
                        FROM ' . $this->getEntityName() . 'Target mt
                        WHERE mt.has_read = 0
                          AND mt.target = :user
                          AND mt.is_deleted = 0'
                    );
        $query->setParameter('user', $user);
        return $query->getSingleScalarResult();
    }

    /**
     * Remove relation between user and message (and message children too)
     *
     * @param Message $message
     * @param User $user
     */
    public function removeUserMessage(Message $message, User $user)
    {
        $em = $this->getEntityManager();
        $nbUndeletedMessages = $em->createQueryBuilder()
                ->select('COUNT(mt)')
                ->from($this->getEntityName() . 'Target', 'mt')
                ->where('mt.message = :message')
                ->setParameter('message', $message)
                ->andWhere('mt.is_deleted = 0')
                ->getQuery()
                ->getSingleScalarResult();
        if ($nbUndeletedMessages > 1)
        {
            $em->createQueryBuilder()
                    ->update($this->getEntityName() . 'Target', 'mt')
                    ->set('mt.is_deleted', TRUE)
                    ->where('mt.message = :message')
                    ->setParameter('message', $message)
                    ->andWhere('mt.target = :user')
                    ->setParameter('user', $user)
                    ->getQuery()
                    ->execute();
        }
        else
        {
            $em->remove($message);
            $em->flush();
        }
    }
}